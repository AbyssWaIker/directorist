{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/src/js/lib/helper.js","webpack:///./assets/src/js/map-custom-scripts/add-listing/google-map.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","get_dom_data","dom_content","document","body","innerHTML","length","terget_content","RegExp","exec","dom_data","JSON","parse","$","jQuery","ready","map","autocomplete","address_input","markers","$manual_lat","$manual_lng","saved_lat_lng","info_content","localized_data","loc_default_latitude","parseFloat","default_latitude","loc_default_longitude","default_longitude","loc_manual_lat","manual_lat","loc_manual_lng","manual_lng","loc_map_zoom_level","parseInt","map_zoom_level","fillInAddress","place","getPlace","val","geometry","location","lat","lng","setCenter","marker","google","maps","Marker","position","push","deleteMarker","setMap","isNaN","InfoWindow","content","maxWidth","getElementById","addEventListener","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","circle","Circle","center","radius","accuracy","setBounds","getBounds","places","Autocomplete","types","addListener","Map","zoom","draggable","title","marker_title","geocoder","Geocoder","e","preventDefault","resultsMap","address","opt","LatLng","geocode","results","status","alert","geocode_error_msg","geocodeAddress","event","latLng","addMarker","initMap","on"],"mappings":"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","file":"add-listing-gmap-custom-script.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 56);\n","function get_dom_data ( key ) {\n    var dom_content = document.body.innerHTML;\n\n    if ( ! dom_content.length ) { return ''; }\n\n    var pattern = new RegExp(\"(<!-- directorist-dom-data::\" + key + \"\\\\s)(.+)(\\\\s-->)\");\n    var terget_content = pattern.exec( dom_content );\n\n    if ( ! terget_content ) { return ''; }\n    if ( typeof terget_content[2] === 'undefined' ) { return ''; }\n    \n    var dom_data = JSON.parse( terget_content[2] );\n\n    if ( ! dom_data ) { return ''; }\n\n    return dom_data;\n}\n\n\nexport { get_dom_data };","import { get_dom_data } from '../../lib/helper';\n\n(function($) {\n        $(document).ready(function() {\n                var localized_data = get_dom_data( 'map_data' );\n\n                // initialize all vars here to avoid hoisting related misunderstanding.\n                let placeSearch;\n                let map;\n                let autocomplete;\n                let address_input;\n                let markers;\n                let info_window;\n                let $manual_lat;\n                let $manual_lng;\n                let saved_lat_lng;\n                let info_content;\n\n                // Localized Data\n                const loc_default_latitude = parseFloat(localized_data.default_latitude);\n                const loc_default_longitude = parseFloat(localized_data.default_longitude);\n                let loc_manual_lat = parseFloat(localized_data.manual_lat);\n                let loc_manual_lng = parseFloat(localized_data.manual_lng);\n                const loc_map_zoom_level = parseInt(localized_data.map_zoom_level);\n\n                loc_manual_lat = isNaN(loc_manual_lat) ? loc_default_latitude : loc_manual_lat;\n                loc_manual_lng = isNaN(loc_manual_lng) ? loc_default_longitude : loc_manual_lng;\n\n                $manual_lat = $('#manual_lat');\n                $manual_lng = $('#manual_lng');\n\n                saved_lat_lng = {\n                        lat: loc_manual_lat,\n                        lng: loc_manual_lng,\n                };\n\n                // default is London city\n                (info_content = localized_data.info_content),\n                        (markers = []), // initialize the array to keep track all the marker\n                        (info_window = new google.maps.InfoWindow({\n                                content: info_content,\n                                maxWidth: 400,\n                        }));\n\n                address_input = document.getElementById('address');\n                address_input.addEventListener('focus', geolocate);\n\n                // this function will work on sites that uses SSL, it applies to Chrome especially, other browsers may allow location sharing without securing.\n                function geolocate() {\n                        if (navigator.geolocation) {\n                                navigator.geolocation.getCurrentPosition(function(position) {\n                                        const geolocation = {\n                                                lat: position.coords.latitude,\n                                                lng: position.coords.longitude,\n                                        };\n                                        const circle = new google.maps.Circle({\n                                                center: geolocation,\n                                                radius: position.coords.accuracy,\n                                        });\n                                        autocomplete.setBounds(circle.getBounds());\n                                });\n                        }\n                }\n\n                function initAutocomplete() {\n                        // Create the autocomplete object, restricting the search to geographical\n                        // location types.\n                        autocomplete = new google.maps.places.Autocomplete(address_input, { types: [] });\n\n                        // When the user selects an address from the dropdown, populate the necessary input fields and draw a marker\n                        autocomplete.addListener('place_changed', fillInAddress);\n                }\n\n                function fillInAddress() {\n                        // Get the place details from the autocomplete object.\n                        const place = autocomplete.getPlace();\n\n                        // set the value of input field to save them to the database\n                        $manual_lat.val(place.geometry.location.lat());\n                        $manual_lng.val(place.geometry.location.lng());\n                        map.setCenter(place.geometry.location);\n                        const marker = new google.maps.Marker({\n                                map,\n                                position: place.geometry.location,\n                        });\n\n                        // marker.addListener('click', function () {\n                        //     info_window.open(map, marker);\n                        // });\n\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\n                        markers.push(marker);\n                }\n\n                initAutocomplete(); // start google map place auto complete API call\n\n                function initMap() {\n                        /* Create new map instance */\n                        map = new google.maps.Map(document.getElementById('gmap'), {\n                                zoom: loc_map_zoom_level,\n                                center: saved_lat_lng,\n                        });\n                        const marker = new google.maps.Marker({\n                                map,\n                                position: saved_lat_lng,\n                                draggable: true,\n                                title: localized_data.marker_title,\n                        });\n                        // marker.addListener('click', function () {\n                        //     info_window.open(map, marker);\n                        // });\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\n                        markers.push(marker);\n\n                        // create a Geocode instance\n                        const geocoder = new google.maps.Geocoder();\n\n                        document.getElementById('generate_admin_map').addEventListener('click', function(e) {\n                                e.preventDefault();\n                                geocodeAddress(geocoder, map);\n                        });\n\n                        // This event listener calls addMarker() when the map is clicked.\n                        google.maps.event.addListener(map, 'click', function(event) {\n                                deleteMarker(); // at first remove previous marker and then set new marker;\n                                // set the value of input field to save them to the database\n                                $manual_lat.val(event.latLng.lat());\n                                $manual_lng.val(event.latLng.lng());\n                                // add the marker to the given map.\n                                addMarker(event.latLng, map);\n                        });\n                        // This event listener update the lat long field of the form so that we can add the lat long to the database when the MARKER is drag.\n                        google.maps.event.addListener(marker, 'dragend', function(event) {\n                                // set the value of input field to save them to the database\n                                $manual_lat.val(event.latLng.lat());\n                                $manual_lng.val(event.latLng.lng());\n                        });\n                }\n\n                /*\n                 * Geocode and address using google map javascript api and then populate the input fields for storing lat and long\n                 * */\n\n                function geocodeAddress(geocoder, resultsMap) {\n                        const address = address_input.value;\n                        const lat = document.getElementById('manual_lat').value;\n                        const lng = document.getElementById('manual_lng').value;\n                        const latLng = new google.maps.LatLng(lat, lng);\n                        const opt = { location: latLng, address };\n\n                        geocoder.geocode(opt, function(results, status) {\n                                if (status === 'OK') {\n                                        // set the value of input field to save them to the database\n                                        $manual_lat.val(results[0].geometry.location.lat());\n                                        $manual_lng.val(results[0].geometry.location.lng());\n                                        resultsMap.setCenter(results[0].geometry.location);\n                                        const marker = new google.maps.Marker({\n                                                map: resultsMap,\n                                                position: results[0].geometry.location,\n                                        });\n\n                                        // marker.addListener('click', function () {\n                                        //     info_window.open(map, marker);\n                                        // });\n\n                                        deleteMarker();\n                                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\n                                        markers.push(marker);\n                                } else {\n                                        alert(localized_data.geocode_error_msg + status);\n                                }\n                        });\n                }\n\n                initMap();\n\n                // adding features of creating marker manually on the map on add listing page.\n                /* var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        var labelIndex = 0; */\n\n                // Adds a marker to the map.\n                function addMarker(location, map) {\n                        // Add the marker at the clicked location, and add the next-available label\n                        // from the array of alphabetical characters.\n                        const marker = new google.maps.Marker({\n                                position: location,\n                                /* label: labels[labelIndex++ % labels.length], */\n                                draggable: true,\n                                title: localized_data.marker_title,\n                                map,\n                        });\n                        // marker.addListener('click', function () {\n                        //     info_window.open(map, marker);\n                        // });\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\n                        markers.push(marker);\n                }\n\n                // Delete Marker\n                $('#delete_marker').on('click', function(e) {\n                        e.preventDefault();\n                        deleteMarker();\n                });\n\n                function deleteMarker() {\n                        for (let i = 0; i < markers.length; i++) {\n                                markers[i].setMap(null);\n                        }\n                        markers = [];\n                }\n        });\n})(jQuery);\n"],"sourceRoot":""}