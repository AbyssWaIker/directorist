{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/src/js/map-custom-scripts/add-listing/google-map.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$","jQuery","document","ready","map","autocomplete","address_input","markers","$manual_lat","$manual_lng","saved_lat_lng","info_content","loc_default_latitude","parseFloat","localized_data","default_latitude","loc_default_longitude","default_longitude","loc_manual_lat","manual_lat","loc_manual_lng","manual_lng","loc_map_zoom_level","parseInt","map_zoom_level","fillInAddress","place","getPlace","val","geometry","location","lat","lng","setCenter","marker","google","maps","Marker","position","push","deleteMarker","length","setMap","isNaN","InfoWindow","content","maxWidth","getElementById","addEventListener","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","circle","Circle","center","radius","accuracy","setBounds","getBounds","places","Autocomplete","types","addListener","Map","zoom","draggable","title","marker_title","geocoder","Geocoder","e","preventDefault","resultsMap","address","opt","LatLng","geocode","results","status","alert","geocode_error_msg","geocodeAddress","event","latLng","addMarker","initMap","on"],"mappings":"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","file":"add-listing-gmap-custom-script.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 49);\n","(function($) {\r\n        $(document).ready(function() {\r\n                // initialize all vars here to avoid hoisting related misunderstanding.\r\n                let placeSearch;\r\n                let map;\r\n                let autocomplete;\r\n                let address_input;\r\n                let markers;\r\n                let info_window;\r\n                let $manual_lat;\r\n                let $manual_lng;\r\n                let saved_lat_lng;\r\n                let info_content;\r\n\r\n                // Localized Data\r\n                const loc_default_latitude = parseFloat(localized_data.default_latitude);\r\n                const loc_default_longitude = parseFloat(localized_data.default_longitude);\r\n                let loc_manual_lat = parseFloat(localized_data.manual_lat);\r\n                let loc_manual_lng = parseFloat(localized_data.manual_lng);\r\n                const loc_map_zoom_level = parseInt(localized_data.map_zoom_level);\r\n\r\n                loc_manual_lat = isNaN(loc_manual_lat) ? loc_default_latitude : loc_manual_lat;\r\n                loc_manual_lng = isNaN(loc_manual_lng) ? loc_default_longitude : loc_manual_lng;\r\n\r\n                $manual_lat = $('#manual_lat');\r\n                $manual_lng = $('#manual_lng');\r\n\r\n                saved_lat_lng = {\r\n                        lat: loc_manual_lat,\r\n                        lng: loc_manual_lng,\r\n                };\r\n\r\n                // default is London city\r\n                (info_content = localized_data.info_content),\r\n                        (markers = []), // initialize the array to keep track all the marker\r\n                        (info_window = new google.maps.InfoWindow({\r\n                                content: info_content,\r\n                                maxWidth: 400,\r\n                        }));\r\n\r\n                address_input = document.getElementById('address');\r\n                address_input.addEventListener('focus', geolocate);\r\n\r\n                // this function will work on sites that uses SSL, it applies to Chrome especially, other browsers may allow location sharing without securing.\r\n                function geolocate() {\r\n                        if (navigator.geolocation) {\r\n                                navigator.geolocation.getCurrentPosition(function(position) {\r\n                                        const geolocation = {\r\n                                                lat: position.coords.latitude,\r\n                                                lng: position.coords.longitude,\r\n                                        };\r\n                                        const circle = new google.maps.Circle({\r\n                                                center: geolocation,\r\n                                                radius: position.coords.accuracy,\r\n                                        });\r\n                                        autocomplete.setBounds(circle.getBounds());\r\n                                });\r\n                        }\r\n                }\r\n\r\n                function initAutocomplete() {\r\n                        // Create the autocomplete object, restricting the search to geographical\r\n                        // location types.\r\n                        autocomplete = new google.maps.places.Autocomplete(address_input, { types: [] });\r\n\r\n                        // When the user selects an address from the dropdown, populate the necessary input fields and draw a marker\r\n                        autocomplete.addListener('place_changed', fillInAddress);\r\n                }\r\n\r\n                function fillInAddress() {\r\n                        // Get the place details from the autocomplete object.\r\n                        const place = autocomplete.getPlace();\r\n\r\n                        // set the value of input field to save them to the database\r\n                        $manual_lat.val(place.geometry.location.lat());\r\n                        $manual_lng.val(place.geometry.location.lng());\r\n                        map.setCenter(place.geometry.location);\r\n                        const marker = new google.maps.Marker({\r\n                                map,\r\n                                position: place.geometry.location,\r\n                        });\r\n\r\n                        // marker.addListener('click', function () {\r\n                        //     info_window.open(map, marker);\r\n                        // });\r\n\r\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\r\n                        markers.push(marker);\r\n                }\r\n\r\n                initAutocomplete(); // start google map place auto complete API call\r\n\r\n                function initMap() {\r\n                        /* Create new map instance */\r\n                        map = new google.maps.Map(document.getElementById('gmap'), {\r\n                                zoom: loc_map_zoom_level,\r\n                                center: saved_lat_lng,\r\n                        });\r\n                        const marker = new google.maps.Marker({\r\n                                map,\r\n                                position: saved_lat_lng,\r\n                                draggable: true,\r\n                                title: localized_data.marker_title,\r\n                        });\r\n                        // marker.addListener('click', function () {\r\n                        //     info_window.open(map, marker);\r\n                        // });\r\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\r\n                        markers.push(marker);\r\n\r\n                        // create a Geocode instance\r\n                        const geocoder = new google.maps.Geocoder();\r\n\r\n                        document.getElementById('generate_admin_map').addEventListener('click', function(e) {\r\n                                e.preventDefault();\r\n                                geocodeAddress(geocoder, map);\r\n                        });\r\n\r\n                        // This event listener calls addMarker() when the map is clicked.\r\n                        google.maps.event.addListener(map, 'click', function(event) {\r\n                                deleteMarker(); // at first remove previous marker and then set new marker;\r\n                                // set the value of input field to save them to the database\r\n                                $manual_lat.val(event.latLng.lat());\r\n                                $manual_lng.val(event.latLng.lng());\r\n                                // add the marker to the given map.\r\n                                addMarker(event.latLng, map);\r\n                        });\r\n                        // This event listener update the lat long field of the form so that we can add the lat long to the database when the MARKER is drag.\r\n                        google.maps.event.addListener(marker, 'dragend', function(event) {\r\n                                // set the value of input field to save them to the database\r\n                                $manual_lat.val(event.latLng.lat());\r\n                                $manual_lng.val(event.latLng.lng());\r\n                        });\r\n                }\r\n\r\n                /*\r\n                 * Geocode and address using google map javascript api and then populate the input fields for storing lat and long\r\n                 * */\r\n\r\n                function geocodeAddress(geocoder, resultsMap) {\r\n                        const address = address_input.value;\r\n                        const lat = document.getElementById('manual_lat').value;\r\n                        const lng = document.getElementById('manual_lng').value;\r\n                        const latLng = new google.maps.LatLng(lat, lng);\r\n                        const opt = { location: latLng, address };\r\n\r\n                        geocoder.geocode(opt, function(results, status) {\r\n                                if (status === 'OK') {\r\n                                        // set the value of input field to save them to the database\r\n                                        $manual_lat.val(results[0].geometry.location.lat());\r\n                                        $manual_lng.val(results[0].geometry.location.lng());\r\n                                        resultsMap.setCenter(results[0].geometry.location);\r\n                                        const marker = new google.maps.Marker({\r\n                                                map: resultsMap,\r\n                                                position: results[0].geometry.location,\r\n                                        });\r\n\r\n                                        // marker.addListener('click', function () {\r\n                                        //     info_window.open(map, marker);\r\n                                        // });\r\n\r\n                                        deleteMarker();\r\n                                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\r\n                                        markers.push(marker);\r\n                                } else {\r\n                                        alert(localized_data.geocode_error_msg + status);\r\n                                }\r\n                        });\r\n                }\r\n\r\n                initMap();\r\n\r\n                // adding features of creating marker manually on the map on add listing page.\r\n                /* var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        var labelIndex = 0; */\r\n\r\n                // Adds a marker to the map.\r\n                function addMarker(location, map) {\r\n                        // Add the marker at the clicked location, and add the next-available label\r\n                        // from the array of alphabetical characters.\r\n                        const marker = new google.maps.Marker({\r\n                                position: location,\r\n                                /* label: labels[labelIndex++ % labels.length], */\r\n                                draggable: true,\r\n                                title: localized_data.marker_title,\r\n                                map,\r\n                        });\r\n                        // marker.addListener('click', function () {\r\n                        //     info_window.open(map, marker);\r\n                        // });\r\n                        // add the marker to the markers array to keep track of it, so that we can show/hide/delete them all later.\r\n                        markers.push(marker);\r\n                }\r\n\r\n                // Delete Marker\r\n                $('#delete_marker').on('click', function(e) {\r\n                        e.preventDefault();\r\n                        deleteMarker();\r\n                });\r\n\r\n                function deleteMarker() {\r\n                        for (let i = 0; i < markers.length; i++) {\r\n                                markers[i].setMap(null);\r\n                        }\r\n                        markers = [];\r\n                }\r\n        });\r\n})(jQuery);\r\n"],"sourceRoot":""}