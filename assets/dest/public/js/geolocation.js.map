{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/src/js/components/geolocation.js"],"names":["$","adbdp_geolocation","select_listing_map","x","document","querySelector","get_lat","get_lng","getLocation","navigator","geolocation","getCurrentPosition","showPosition","showError","value","position","lat","coords","latitude","lon","longitude","displayLocation","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","geocoder","google","maps","Geocoder","latlng","LatLng","geocode","latLng","componentRestrictions","country","results","status","GeocoderStatus","OK","add","formatted_address","split","count","length","state","city","get_loc_btn","addEventListener","lng","ajax","url","type","data","success","val","display_name","on","jQuery"],"mappings":"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","file":"geolocation.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","(function($) {\n        /* $(\"button[type='reset']\").on(\"click\", function (){\n        $(\"#atbd_rs_value\").val(0);\n        $(\".atbdpr_amount\").text(0 + miles);\n        slider_range.each(function () {\n            $(this).slider({\n                range: \"min\",\n                min: 0,\n                max: 1000,\n                value: 0,\n                slide: function (event, ui) {\n                    $(\".atbdpr_amount\").text(ui.value + miles);\n                    $(\"#atbd_rs_value\").val(ui.value);\n                }\n            });\n        });\n        $(\"#at_biz_dir-location, #at_biz_dir-category\").val('').trigger('change');\n    }); */\n        /* get current location */\n        if (adbdp_geolocation.select_listing_map === 'google') {\n                (function() {\n                        const x = document.querySelector('.location-name');\n                        const get_lat = document.querySelector('#cityLat');\n                        const get_lng = document.querySelector('#cityLng');\n\n                        function getLocation() {\n                                if (navigator.geolocation) {\n                                        navigator.geolocation.getCurrentPosition(showPosition, showError);\n                                } else {\n                                        x.value = 'Geolocation is not supported by this browser.';\n                                }\n                        }\n\n                        function showPosition(position) {\n                                lat = position.coords.latitude;\n                                lon = position.coords.longitude;\n                                displayLocation(lat, lon);\n                                get_lat.value = lat;\n                                get_lng.value = lon;\n                        }\n\n                        function showError(error) {\n                                switch (error.code) {\n                                        case error.PERMISSION_DENIED:\n                                                x.value = 'User denied the request for Geolocation.';\n                                                break;\n                                        case error.POSITION_UNAVAILABLE:\n                                                x.value = 'Location information is unavailable.';\n                                                break;\n                                        case error.TIMEOUT:\n                                                x.value = 'The request to get user location timed out.';\n                                                break;\n                                        case error.UNKNOWN_ERROR:\n                                                x.value = 'An unknown error occurred.';\n                                                break;\n                                }\n                        }\n\n                        function displayLocation(latitude, longitude) {\n                                let geocoder;\n                                geocoder = new google.maps.Geocoder();\n                                const latlng = new google.maps.LatLng(latitude, longitude);\n                                geocoder.geocode({ latLng: latlng, componentRestrictions: { country: 'GB' } }, function(\n                                        results,\n                                        status\n                                ) {\n                                        if (status == google.maps.GeocoderStatus.OK) {\n                                                if (results[0]) {\n                                                        const add = results[0].formatted_address;\n                                                        const value = add.split(',');\n\n                                                        count = value.length;\n                                                        country = value[count - 1];\n                                                        state = value[count - 2];\n                                                        city = value[count - 3];\n                                                        x.value = city;\n                                                } else {\n                                                        x.value = 'address not found';\n                                                }\n                                        } else {\n                                                x.value = `Geocoder failed due to: ${status}`;\n                                        }\n                                });\n                        }\n\n                        const get_loc_btn = document.querySelector('.directorist-filter-location-icon');\n                        get_loc_btn.addEventListener('click', function() {\n                                getLocation();\n                        });\n                })();\n        } else if (adbdp_geolocation.select_listing_map === 'openstreet') {\n                function displayLocation(position) {\n                        const lat = position.coords.latitude;\n                        const lng = position.coords.longitude;\n\n                        $.ajax({\n                                url: `https://nominatim.openstreetmap.org/reverse?format=json&lon=${lng}&lat=${lat}`,\n                                type: 'POST',\n                                data: {},\n                                success(data) {\n                                        $('#address,.atbdp-search-address').val(data.display_name);\n                                        $('#cityLat').val(lat);\n                                        $('#cityLng').val(lng);\n                                },\n                        });\n                }\n\n                $('.directorist-filter-location-icon').on('click', () => {\n                        navigator.geolocation.getCurrentPosition(displayLocation);\n                });\n        }\n})(jQuery);\n"],"sourceRoot":""}